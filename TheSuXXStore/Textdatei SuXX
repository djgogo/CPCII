Sicherheitslücken:

- Als erstes musste die Ordnerberechtigung angepasst werden. Sie war für jedermann auf write eingestellt. chmod 775.

- Jeder Request wird als isolierter Prozess betrachtet und daher für sich auf Gültigkeit geprüft. Eine Annahme über etwaige voreher erfolgte Anfragen sollte nicht
stattfinden.

- Der Zugriff auf jeden Ordner und Script ist von aussen ganz einfach möglich via Link-Parameter Eingabe im Browser. Sämtliche von PHP per require oder include
nachgeladenen Dateien sollten ausserhalb des direkt von Extern erreichbaren Verzeichnisses liegen. Apache oder nginx Konfiguration auf SSL (HTTPS) setzen und
alle eingehenden Anfragen über einen Bootstrapper abwickeln.

- Die Registrierung und das Login ist komplett unsicher. Es wird direkt in die Datenbank geschrieben. Hier fehlt die komplette Validierung. Die Eingaben sind
auch nicht gegen XSS (Cross Site Scripting) geschützt. Um dies zu verhindern sollten die Eingaben maskiert (escaped) werden. Bei der Ausgabe von benutzer-
generierten Daten in (X)HTML müssen lediglich diejenigen zeichen umgewandelt werden, die eine syntaktische Bedeutung haben. Für HTML sind dies sowohl die für
Tags verwendeten Zeichen < und > als auch die Anführungszeichen " und ' bei Attributen. Bei XHTML muss zusätzlich das &-Zeichen ersetzt werden, da es sonst
fälschlicherweise als Beginn einer Entity-Referenz erkannt wird. Für die Maskierung kann z.b. die Funktion htmlspecialchars() verwendet werden, die genau diese
Zeichen ersetzt. Es empfiehlt sich, ENT_QUOTES als zweiten Parameter zu übergeben, damit sowohl single als auch double-Quotes ersetzt werden. Das Encoding
(Zeichenkodierung) sollte unbedingt auch berücksichtigt werden.

- Alle Datenbankzugriffe sind nicht gegen SQL-Injection geschützt. Dies sollte z.B. mit PDO Prepared Statements gesichert werden. Generell alle Datenbankzugriffe
sollten so implementiert  sein.

- Sowohl für Datenbank-Zugriff als auch für System-Prozesse sollten individuelle Accounts angelegt und mit genau den Rechten ausgestattet werden, wie sie
zur erolgreichen Ausführung maximal benötigen.

- Das Passwort ist komplett ungeschützt. Es wird in Klartext gespeichert! Es sollte mit einem sicheren Hash-Algorithmus gesichert werden um es vor Angreifer zu schützen.
Die nie zum Hashing von Passworten gedachten Fuktionen md5() oder sha1() sollten zu diesem Zweck nicht verwendet werden. Das Passwort sollte mindestens eine
gewisse Länge, also mindestens 6 Zeichen lang sein.

- Beim Loginverfahren wird das komplette User-Objekt in die Session übertragen. Sensible Daten wie der Username und das Passwort sind nicht gegen Angreifer geschützt.
Nach einem erfolgreichen Login sowie bei jeder weiteren Aenderung der Zurgriffsrechte sollte via session_regenerate_id() eine neue Session-Id vergeben werden. Dieses
Vorgehen verhindert effektiv sogenannte Session-Fixation-Angriffe. Eine Session-Fixation liegt vor, wenn ein Angreifer sein opfer dazu bringen kann, die attackierte
Webseite über einen modifizierten Link zu besuchen und Ihm dabei eine vorgegebene Session-Id aufzwingt.

- Beim Loginverfahren wird das komplette User-Objekt in ein Cookie gespeichert welches einen ganzen Monat lebt. Sensible Daten wie der Username und das Passwort
sind so nicht gegen Angreifer geschützt. Das Cookie sollte in diesem Fall nur zur Uebermittlung der Session-Id benutzt werden. Und das Cookie sollte natürlich
nur mit einer sicheren Verbindung übertragen werden (HTTPS).

- Die Kommentarabgabe für ein Produkt ist komplett unsicher. Es ist nicht gegen XSS abgesichert (escapen) und auch nicht validiert (Fehlerbehandlung).

- Beim Kommentar kann ein Bild hochgeladen werden. Im Moment könnte ein Angreifer ein Virus, einen Wurm oder sonstwas hochladen. Hier sollten nur Bild-Dateien
erlaubt werden. Das sollte bei einer Validierung dringend berücksichtigt werden.

- Die Templates/Pages sind nicht gegen CSRF (Cross Site Request Forgery) geschützt. Entführte URL's könnten missbraucht werden um auf Pages zu gelangen ohne
notwendige Berechtigung oder um Seiten nachzubauen um sensible Benutzerdaten zu fischen. Zur Absicherung dieses Problems bedarf es eines Request-Tokens,
der per verstecktem Eingabefeld in einem Formular mitgeschickt wird. Da dieser Wert für jedes Formular und jeden Abruf der Seite ein anderer ist, kann ein
Angreifer zwar noch die Struktur nachbauen, den aktuellen Wert des Tokens jedoch müsste er raten. Damit dieses Raten nicht von Erfolg gekrönt wird, ist es
zwingend notwendig, den Wert für den Token nicht auf einem fortlaufenden und damit vorhersagbaren Wert wie z.B. einem Zeitstempel aufzubauen.



